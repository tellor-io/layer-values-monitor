from unittest.mock import patch

from layer_values_monitor.monitor import get_source_from_data

from telliot_feeds.datasource import DataSource


def test_get_source_from_data():
    spot_query_data = (
        # xsa/usd
        "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003787361000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000",
        # ggg/usd
        "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003676767000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000",
    )
    for query_data in spot_query_data:
        data_source = get_source_from_data(bytes.fromhex(query_data))
        assert isinstance(data_source, DataSource)


def test_non_existing_query_type():
    with patch("layer_values_monitor.logger.logger.error") as mock_logger:
        bad_query = "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b6e6f6e6578697374696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003676767000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000"  # noqa: E501
        data_source = get_source_from_data(bytes.fromhex(bad_query))

        mock_logger.assert_called_once_with("Unsupported query type: nonexisting")
        assert data_source is None


def test_query_types_exists_no_abi_attribute():
    with patch("layer_values_monitor.logger.logger.error") as mock_logger:
        query_data = "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c52616e646f6d536f75726365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003676767000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000"  # noqa: E501
        data_source = get_source_from_data(bytes.fromhex(query_data))

        mock_logger.assert_called_once_with("query type RandomSource doesn't have abi attirbute to decode params")
    assert data_source is None


def test_query_types_exists_no_feed():
    with patch("layer_values_monitor.logger.logger.error") as mock_logger:
        query_data = "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c46696c654349445175657279000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003676767000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000"  # noqa: E501
        data_source = get_source_from_data(bytes.fromhex(query_data))

        mock_logger.assert_called_once_with("query type FileCIDQuery not supported by datafeed builder")
        assert data_source is None
